% PO 2 0
% Group AssertionLemmas
% Tag Assertion is verified
%--------------------------------------------------------------------------
% File     : .
% Domain   : Atelier-B Proof Obligations - translated to TPTP
% Version  : TPTP v5.3.0. Released v2.2.0.
% English  : 
% Comments : Generated by PPTRANS-TPTP
% Source   : 
%--------------------------------------------------------------------------

tff(set_0_type,type,(set_0: $tType )).
tff(mem0_type,type,(mem0: ( $int * set_0 ) > $o )).

tff(set_1_type,type,(set_1: $tType )).
tff(mem1_type,type,(mem1: ( $real * set_1 ) > $o )).

tff(min_int_type,type,(min_int: $int)).
tff(max_int_type,type,(max_int: $int)).
tff(min_int_axiom,axiom,(min_int = $uminus(2147483648))).
tff(max_int_axiom,axiom,(max_int = 2147483647)).
%--------------------------------------------------------------------------
% Global declarations
tff(set_2_type, type, set_2 : $tType).
tff(set_2_empty, type, set_2_empty : set_2).
tff(set_2_insert, type, set_2_insert : set_2 > set_2).
tff(g_rel1_0_type, type, g_rel1_0 : set_2).
tff(mem2_type, type, mem2 : ($int * $int * set_2) > $o).
tff(g_fun1_1_type, type, g_fun1_1 : set_2).
tff(g_fun2_2_type, type, g_fun2_2 : set_2).
tff(g_fun3_3_type, type, g_fun3_3 : set_2).
tff(set_3_type, type, set_3 : $tType).
tff(set_3_empty, type, set_3_empty : set_3).
tff(set_3_insert, type, set_3_insert : set_3 > set_3).
tff(g_fun4_4_type, type, g_fun4_4 : set_3).
tff(mem3_type, type, mem3 : ($real * $real * set_3) > $o).
% Defines
tff('Define:lprp:0', axiom, (! [X_5 : $int, X_6 : $int] : (((mem2(X_6, X_5, g_rel1_0)) <=> ((((X_6 = 2) & (X_5 = 7)) | ((X_6 = 5) & (X_5 = 9)) | ((X_6 = 2) & (X_5 = 6)) | ((X_6 = 7) & (X_5 = 9)) | ((X_6 = 5) & (X_5 = 3)))))))).

tff('Define:lprp:1', axiom, (! [X_7 : $int, X_8 : $int] : (((mem2(X_8, X_7, g_fun1_1)) => (($true & $true)))))).

tff('Define:lprp:2', axiom, (! [X_9 : $int] : ((((? [X_10 : $int] : (mem2(X_9, X_10, g_fun1_1)))) <=> (($greatereq(X_9, 0) & $lesseq(X_9, 2))))))).

tff('Define:lprp:3', axiom, (! [X_11 : $int] : ((((? [X_12 : $int] : (mem2(X_12, X_11, g_fun1_1)))) <=> (($greatereq(X_11, 1) & $lesseq(X_11, 3))))))).

tff('Define:lprp:4', axiom, (! [L_xx : $int] : ((((? [X_13 : $int] : (mem2(L_xx, X_13, g_fun1_1)))) => (! [X_14 : $int] : ((X_14 = $sum(L_xx, 1)) => (mem2(L_xx, X_14, g_fun1_1)))))))).

tff('Define:lprp:5', axiom, (! [X_15 : $int, X_16 : $int] : (((mem2(X_16, X_15, g_fun2_2)) <=> ((($greatereq(X_16, 0) & $lesseq(X_16, 2)) & (X_15 = $sum(X_16, 1)))))))).

tff('Define:lprp:6', axiom, (! [X_17 : $int, X_18 : $int] : (((mem2(X_18, X_17, g_fun3_3)) <=> ((($greatereq(X_18, 0) & $lesseq(X_18, 2)) & (X_17 = $sum(X_18, 1)))))))).

tff('Define:lprp:7', axiom, (! [X_19 : $real, X_20 : $real] : (((mem3(X_20, X_19, g_fun4_4)) => (($true & $true)))))).

%Global hypotheses
tff('gh_0_def', hypothesis, (? [X_53 : set_2] : ((! [X_54 : $int, X_55 : $int] : (((mem2(X_55, X_54, X_53)) <=> (mem2(X_55, X_54, g_rel1_0))))) & (! [X_56 : $int, X_57 : $int, X_58 : $int] : ((((mem2(X_56, X_57, X_53) & mem2(X_56, X_58, X_53))) => ((X_57 = X_58))))) & (! [X_59 : $int] : (((($greatereq(X_59, 0) & $lesseq(X_59, 7))) <=> ((? [X_60 : $int] : (mem2(X_59, X_60, X_53))))))) & (! [X_61 : $int] : ((((? [X_62 : $int] : (mem2(X_62, X_61, X_53)))) => (($greatereq(X_61, 0) & $lesseq(X_61, 10))))))))).

tff('gh_1_def', hypothesis, (? [X_63 : set_2] : ((! [X_64 : $int, X_65 : $int] : (((mem2(X_65, X_64, X_63)) <=> (mem2(X_65, X_64, g_fun1_1))))) & (! [X_66 : $int, X_67 : $int, X_68 : $int] : ((((mem2(X_66, X_67, X_63) & mem2(X_66, X_68, X_63))) => ((X_67 = X_68))))) & (! [X_69 : $int] : ((((? [X_70 : $int] : (mem2(X_69, X_70, g_fun1_1)))) <=> ((? [X_71 : $int] : (mem2(X_69, X_71, X_63))))))) & (! [X_72 : $int] : ((((? [X_73 : $int] : (mem2(X_73, X_72, X_63)))) => ((? [X_74 : $int] : (mem2(X_74, X_72, g_fun1_1)))))))))).

% Local hypotheses
% Goal
tff('Goal', conjecture, (? [X_75 : set_2] : ((! [X_76 : $int, X_77 : $int] : (((mem2(X_77, X_76, X_75)) <=> (mem2(X_77, X_76, g_fun2_2))))) & (! [X_78 : $int, X_79 : $int, X_80 : $int] : ((((mem2(X_78, X_79, X_75) & mem2(X_78, X_80, X_75))) => ((X_79 = X_80))))) & (! [X_81 : $int] : ((($true) <=> ((? [X_82 : $int] : (mem2(X_81, X_82, X_75))))))) & (! [X_83 : $int] : ((((? [X_84 : $int] : (mem2(X_84, X_83, X_75)))) => ($true))))))).

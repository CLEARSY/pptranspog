% PO 2 0
% Group AssertionLemmas
% Tag Assertion is verified
%--------------------------------------------------------------------------
% File     : .
% Domain   : Atelier-B Proof Obligations - translated to TPTP
% Version  : TPTP v5.3.0. Released v2.2.0.
% English  : 
% Comments : Generated by PPTRANS-TPTP
% Source   : 
%--------------------------------------------------------------------------

tff(set_0_type,type,(set_0: $tType )).
tff(mem0_type,type,(mem0: ( $int * set_0 ) > $o )).

tff(min_int_type,type,(min_int: $int)).
tff(max_int_type,type,(max_int: $int)).
tff(min_int_axiom,axiom,(min_int = $uminus(2147483648))).
tff(max_int_axiom,axiom,(max_int = 2147483647)).
%--------------------------------------------------------------------------
% Global declarations
tff(g_c0_1_type, type, g_c0_1 : $int).
tff(g_c1_2_type, type, g_c1_2 : set_0).
tff(g_c2_3_type, type, g_c2_3 : set_3).
tff(g_s0_0_type, type, g_s0_0 : set_0).
tff(mem2_type, type, mem2 : ($int * $int * set_2) > $o).
tff(mem3_type, type, mem3 : (set_0 * set_3) > $o).
tff(mem4_type, type, mem4 : (set_0 * $int * set_4) > $o).
tff(prod_0_type, type, prod_0 : $tType).
tff(prod_0_empty, type, prod_0_empty : prod_0).
tff(prod_0_insert, type, prod_0_insert : ($int * $int) > prod_0).
tff(prod_0_in, type, prod_0_in : ($int * $int * prod_0) > $o).
tff(prod_1_type, type, prod_1 : $tType).
tff(prod_1_empty, type, prod_1_empty : prod_1).
tff(prod_1_insert, type, prod_1_insert : (set_0 * $int) > prod_1).
tff(prod_1_in, type, prod_1_in : (set_0 * $int * prod_1) > $o).
tff(set_2_type, type, set_2 : $tType).
tff(set_2_empty, type, set_2_empty : set_2).
tff(set_2_insert, type, set_2_insert : (prod_0) > set_2).
tff(set_3_type, type, set_3 : $tType).
tff(set_3_empty, type, set_3_empty : set_3).
tff(set_3_insert, type, set_3_insert : (set_0) > set_3).
tff(set_4_type, type, set_4 : $tType).
tff(set_4_empty, type, set_4_empty : set_4).
tff(set_4_insert, type, set_4_insert : (prod_1) > set_4).
% Defines
tff('Define:lprp:0', axiom, ((~((! [X_5 : $int] : (((mem0(X_5, g_s0_0)) <=> ($false)))))) & ((! [X_8 : $int] : (((mem0(X_8, g_s0_0)) => ($true)))) & (? [X_6 : $int, X_7 : set_2] : ((((? [X_9 : set_2] : ((! [X_10 : $int, X_11 : $int] : (((mem2(X_11, X_10, X_9)) <=> (mem2(X_11, X_10, X_7))))) & (! [X_12 : $int, X_13 : $int, X_14 : $int] : ((((mem2(X_12, X_13, X_9) & mem2(X_12, X_14, X_9))) => ((X_13 = X_14))))) & (! [X_15 : $int] : (((($greatereq(X_15, 1) & $lesseq(X_15, X_6))) <=> ((? [X_16 : $int] : (mem2(X_15, X_16, X_9))))))) & (! [X_17 : $int] : ((((? [X_18 : $int] : (mem2(X_18, X_17, X_9)))) => (mem0(X_17, g_s0_0))))))) & (! [X_19 : $int] : (((mem0(X_19, g_s0_0)) => ((? [X_20 : $int] : (mem2(X_20, X_19, X_7)))))))) & (! [X_21 : $int, X_22 : $int, X_23 : $int] : ((((mem2(X_22, X_21, X_7) & mem2(X_23, X_21, X_7))) => ((X_22 = X_23))))))))))).

tff('Define:lprp:1', axiom, mem0(g_c0_1, g_s0_0)).

tff('Define:lprp:2', axiom, (! [X_24 : $int] : (((mem0(X_24, g_c1_2)) => (mem0(X_24, g_s0_0)))))).

tff('Define:lprp:3', axiom, (! [X_25 : set_0] : (((mem3(X_25, g_c2_3)) => ((! [X_26 : $int] : (((mem0(X_26, X_25)) => (mem0(X_26, g_s0_0)))))))))).

%Global hypotheses
tff('gh_0_def', hypothesis, mem0(g_c0_1, g_c1_2)).

tff('gh_1_def', hypothesis, mem3(g_c1_2, g_c2_3)).

% Local hypotheses
% Goal
tff('Goal', conjecture, (? [X_27 : set_2] : ((((? [X_28 : set_2] : ((! [X_29 : $int, X_30 : $int] : (((mem2(X_30, X_29, X_28)) <=> (mem2(X_30, X_29, X_27))))) & (! [X_31 : $int, X_32 : $int, X_33 : $int] : ((((mem2(X_31, X_32, X_28) & mem2(X_31, X_33, X_28))) => ((X_32 = X_33))))) & (! [X_34 : $int] : (((mem0(X_34, g_c1_2)) <=> ((? [X_35 : $int] : (mem2(X_34, X_35, X_28))))))) & (! [X_36 : $int] : ((((? [X_37 : $int] : (mem2(X_37, X_36, X_28)))) => (! [X_38 : $int] : ((? [X_39 : set_4] : ((((? [X_40 : set_4] : ((! [X_41 : $int, X_42 : set_0] : (((mem4(X_42, X_41, X_40)) <=> (mem4(X_42, X_41, X_39))))) & (! [X_43 : set_0, X_44 : $int, X_45 : $int] : ((((mem4(X_43, X_44, X_40) & mem4(X_43, X_45, X_40))) => ((X_44 = X_45))))) & (! [X_46 : set_0] : (((mem3(X_46, g_c2_3)) <=> ((? [X_47 : $int] : (mem4(X_46, X_47, X_40))))))) & (! [X_48 : $int] : ((((? [X_49 : set_0] : (mem4(X_49, X_48, X_40)))) => (($greatereq(X_48, 1) & $lesseq(X_48, X_38)))))))) & (! [X_50 : $int] : (((($greatereq(X_50, 1) & $lesseq(X_50, X_38))) => ((? [X_51 : set_0] : (mem4(X_51, X_50, X_39)))))))) & (! [X_52 : $int, X_53 : set_0, X_54 : set_0] : ((((mem4(X_53, X_52, X_39) & mem4(X_54, X_52, X_39))) => ((! [X_55 : $int] : (((mem0(X_55, X_53)) <=> (mem0(X_55, X_54)))))))))))) => (($greatereq(X_36, 1) & $lesseq(X_36, X_38)))))))))) & (! [X_56 : $int] : (((! [X_57 : $int] : ((? [X_58 : set_4] : ((((? [X_59 : set_4] : ((! [X_60 : $int, X_61 : set_0] : (((mem4(X_61, X_60, X_59)) <=> (mem4(X_61, X_60, X_58))))) & (! [X_62 : set_0, X_63 : $int, X_64 : $int] : ((((mem4(X_62, X_63, X_59) & mem4(X_62, X_64, X_59))) => ((X_63 = X_64))))) & (! [X_65 : set_0] : (((mem3(X_65, g_c2_3)) <=> ((? [X_66 : $int] : (mem4(X_65, X_66, X_59))))))) & (! [X_67 : $int] : ((((? [X_68 : set_0] : (mem4(X_68, X_67, X_59)))) => (($greatereq(X_67, 1) & $lesseq(X_67, X_57)))))))) & (! [X_69 : $int] : (((($greatereq(X_69, 1) & $lesseq(X_69, X_57))) => ((? [X_70 : set_0] : (mem4(X_70, X_69, X_58)))))))) & (! [X_71 : $int, X_72 : set_0, X_73 : set_0] : ((((mem4(X_72, X_71, X_58) & mem4(X_73, X_71, X_58))) => ((! [X_74 : $int] : (((mem0(X_74, X_72)) <=> (mem0(X_74, X_73)))))))))))) => (($greatereq(X_56, 1) & $lesseq(X_56, X_57))))) => ((? [X_75 : $int] : (mem2(X_75, X_56, X_27)))))))) & (! [X_76 : $int, X_77 : $int, X_78 : $int] : ((((mem2(X_77, X_76, X_27) & mem2(X_78, X_76, X_27))) => ((X_77 = X_78))))))))).

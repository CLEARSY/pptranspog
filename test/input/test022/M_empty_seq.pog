<?xml version="1.0" encoding="UTF-8"?>
<Proof_Obligations xmlns="https://www.atelierb.eu/Formats/pog" version="1.0">
    <Define name="B definitions" hash="7128875304803749033">
        <Exp_Comparison op="=">
            <Id value="NAT" typref="0"/>
            <Binary_Exp op=".." typref="0">
                <Integer_Literal value="0" typref="1"/>
                <Id value="MAXINT" typref="1"/>
            </Binary_Exp>
        </Exp_Comparison>
        <Exp_Comparison op="=">
            <Id value="INT" typref="0"/>
            <Binary_Exp op=".." typref="0">
                <Id value="MININT" typref="1"/>
                <Id value="MAXINT" typref="1"/>
            </Binary_Exp>
        </Exp_Comparison>
    </Define>
    <Define name="ctx" hash="0"/>
    <Define name="seext" hash="0"/>
    <Define name="lprp" hash="7236429840719285214">
        <Exp_Comparison op=":">
            <Id value="empty_seq" typref="2" tag="M_empty_seq.bxml:1:2:1:1:1"/>
            <Unary_Exp op="seq" typref="3">
                <Id value="INTEGER" typref="0" tag="M_empty_seq.bxml:1:2:1:1:2:1"/>
            </Unary_Exp>
        </Exp_Comparison>
        <Exp_Comparison op="=">
            <Id value="empty_seq" typref="2" tag="M_empty_seq.bxml:1:2:1:2:1"/>
            <EmptySet typref="2" tag="M_empty_seq.bxml:1:2:1:2:2"/>
        </Exp_Comparison>
    </Define>
    <Define name="inprp" hash="0"/>
    <Define name="inext" hash="0"/>
    <Define name="inv" hash="0"/>
    <Define name="ass" hash="18048874399012395058">
        <Exp_Comparison op=":">
            <Binary_Exp op="|-&gt;" typref="4">
                <Integer_Literal value="1" typref="1" tag="M_empty_seq.bxml:1:4:1:1:1:1"/>
                <Integer_Literal value="0" typref="1" tag="M_empty_seq.bxml:1:4:1:1:1:2"/>
            </Binary_Exp>
            <Id value="empty_seq" typref="2" tag="M_empty_seq.bxml:1:4:1:1:2"/>
        </Exp_Comparison>
        <Unary_Pred op="not">
            <Exp_Comparison op=":">
                <Binary_Exp op="|-&gt;" typref="4">
                    <Integer_Literal value="1" typref="1" tag="M_empty_seq.bxml:1:4:1:2:1:1"/>
                    <Integer_Literal value="1" typref="1" tag="M_empty_seq.bxml:1:4:1:2:1:2"/>
                </Binary_Exp>
                <Id value="empty_seq" typref="2" tag="M_empty_seq.bxml:1:4:1:2:2"/>
            </Exp_Comparison>
        </Unary_Pred>
        <Exp_Comparison op=":">
            <Binary_Exp op="|-&gt;" typref="4">
                <Integer_Literal value="1" typref="1" tag="M_empty_seq.bxml:1:4:1:3:1:1"/>
                <Integer_Literal value="0" typref="1" tag="M_empty_seq.bxml:1:4:1:3:1:2"/>
            </Binary_Exp>
            <EmptySet typref="2" tag="M_empty_seq.bxml:1:4:1:3:2"/>
        </Exp_Comparison>
        <Unary_Pred op="not">
            <Exp_Comparison op=":">
                <Binary_Exp op="|-&gt;" typref="5">
                    <Integer_Literal value="1" typref="1" tag="M_empty_seq.bxml:1:4:1:4:1:1"/>
                    <Boolean_Literal value="TRUE" typref="6" tag="M_empty_seq.bxml:1:4:1:4:1:2"/>
                </Binary_Exp>
                <EmptySet typref="7" tag="M_empty_seq.bxml:1:4:1:4:2"/>
            </Exp_Comparison>
        </Unary_Pred>
    </Define>
    <Define name="cst" hash="0"/>
    <Define name="sets" hash="0"/>
    <Proof_Obligation goalHash="4603029624529770827">
        <Tag>AssertionLemmas</Tag>
        <Definition name="B definitions"/>
        <Definition name="ctx"/>
        <Definition name="cst"/>
        <Definition name="lprp"/>
        <Definition name="inprp"/>
        <Definition name="inext"/>
        <Definition name="seext"/>
        <Definition name="inv"/>
        <Simple_Goal>
            <Tag>Assertion is verified</Tag>
            <Goal>
                <Exp_Comparison op=":">
                    <Binary_Exp op="|-&gt;" typref="4">
                        <Integer_Literal value="1" typref="1" tag="M_empty_seq.bxml:1:4:1:1:1:1"/>
                        <Integer_Literal value="0" typref="1" tag="M_empty_seq.bxml:1:4:1:1:1:2"/>
                    </Binary_Exp>
                    <Id value="empty_seq" typref="2" tag="M_empty_seq.bxml:1:4:1:1:2"/>
                </Exp_Comparison>
            </Goal>
        </Simple_Goal>
        <Simple_Goal>
            <Tag>Assertion is verified</Tag>
            <Goal>
                <Unary_Pred op="not">
                    <Exp_Comparison op=":">
                        <Binary_Exp op="|-&gt;" typref="4">
                            <Integer_Literal value="1" typref="1" tag="M_empty_seq.bxml:1:4:1:2:1:1"/>
                            <Integer_Literal value="1" typref="1" tag="M_empty_seq.bxml:1:4:1:2:1:2"/>
                        </Binary_Exp>
                        <Id value="empty_seq" typref="2" tag="M_empty_seq.bxml:1:4:1:2:2"/>
                    </Exp_Comparison>
                </Unary_Pred>
            </Goal>
        </Simple_Goal>
        <Simple_Goal>
            <Tag>Assertion is verified</Tag>
            <Goal>
                <Exp_Comparison op=":">
                    <Binary_Exp op="|-&gt;" typref="4">
                        <Integer_Literal value="1" typref="1" tag="M_empty_seq.bxml:1:4:1:3:1:1"/>
                        <Integer_Literal value="0" typref="1" tag="M_empty_seq.bxml:1:4:1:3:1:2"/>
                    </Binary_Exp>
                    <EmptySet typref="2" tag="M_empty_seq.bxml:1:4:1:3:2"/>
                </Exp_Comparison>
            </Goal>
        </Simple_Goal>
        <Simple_Goal>
            <Tag>Assertion is verified</Tag>
            <Goal>
                <Unary_Pred op="not">
                    <Exp_Comparison op=":">
                        <Binary_Exp op="|-&gt;" typref="5">
                            <Integer_Literal value="1" typref="1" tag="M_empty_seq.bxml:1:4:1:4:1:1"/>
                            <Boolean_Literal value="TRUE" typref="6" tag="M_empty_seq.bxml:1:4:1:4:1:2"/>
                        </Binary_Exp>
                        <EmptySet typref="7" tag="M_empty_seq.bxml:1:4:1:4:2"/>
                    </Exp_Comparison>
                </Unary_Pred>
            </Goal>
        </Simple_Goal>
    </Proof_Obligation>
    <TypeInfos>
        <Type id="0">
            <Unary_Exp op="POW">
                <Id value="INTEGER"/>
            </Unary_Exp>
        </Type>
        <Type id="1">
            <Id value="INTEGER"/>
        </Type>
        <Type id="2">
            <Unary_Exp op="POW">
                <Binary_Exp op="*">
                    <Id value="INTEGER"/>
                    <Id value="INTEGER"/>
                </Binary_Exp>
            </Unary_Exp>
        </Type>
        <Type id="3">
            <Unary_Exp op="POW">
                <Unary_Exp op="POW">
                    <Binary_Exp op="*">
                        <Id value="INTEGER"/>
                        <Id value="INTEGER"/>
                    </Binary_Exp>
                </Unary_Exp>
            </Unary_Exp>
        </Type>
        <Type id="4">
            <Binary_Exp op="*">
                <Id value="INTEGER"/>
                <Id value="INTEGER"/>
            </Binary_Exp>
        </Type>
        <Type id="5">
            <Binary_Exp op="*">
                <Id value="INTEGER"/>
                <Id value="BOOL"/>
            </Binary_Exp>
        </Type>
        <Type id="6">
            <Id value="BOOL"/>
        </Type>
        <Type id="7">
            <Unary_Exp op="POW">
                <Binary_Exp op="*">
                    <Id value="INTEGER"/>
                    <Id value="BOOL"/>
                </Binary_Exp>
            </Unary_Exp>
        </Type>
    </TypeInfos>
</Proof_Obligations>
